# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    uploads_folder: '%env(resolve:UPLOADS_DIRECTORY)%/'
    uploads_directory: '%kernel.project_dir%/public/%uploads_folder%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Services\FileUploader:
        arguments:
            $uploadsDirectory: '%uploads_directory%'

    App\Model\ProductModel:
        calls:
            - [setCategoryModel, ['@App\Model\CategoryModel']]
        arguments:
            $uploadsDirectory: '%uploads_directory%'
            $uploadsFolder: '%uploads_folder%'

    App\Model\CategoryModel:
        calls:
            - [setProductModel, ['@App\Model\ProductModel']]

    gedmo.mapping.driver.attribute:
        class: Gedmo\Mapping\Driver\AttributeReader

    gedmo.listener.sluggable:
        class: Gedmo\Sluggable\SluggableListener
        tags:
            - { name: doctrine.event_listener, event: 'onFlush' }
            - { name: doctrine.event_listener, event: 'loadClassMetadata' }
            - { name: doctrine.event_listener, event: 'prePersist' }
        calls:
            - [ setAnnotationReader, [ '@gedmo.mapping.driver.attribute' ] ]

    gedmo.listener.soft_deleteable:
        class: Gedmo\SoftDeleteable\SoftDeleteableListener
        tags:
            - { name: doctrine.event_listener, event: 'loadClassMetadata' }
            - { name: doctrine.event_listener, event: 'onFlush' }
        calls:
            - [ setAnnotationReader, [ '@gedmo.mapping.driver.attribute' ] ]
            - [ setClock, [ '@clock' ] ]